const express = require('express' );
const { body, validationResult } = require('express-validator');
const Comment = require('../models/Comment');
const Post = require('../models/Post');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

// Valida√ß√µes para coment√°rios
const commentValidation = [
    body('content')
        .trim()
        .isLength({ min: 1, max: 1000 })
        .withMessage('Coment√°rio deve ter entre 1 e 1000 caracteres')
];

// Buscar coment√°rios de um post espec√≠fico
router.get('/posts/:postId/comments', async (req, res) => {
    try {
        console.log('üí¨ [COMMENTS] Buscando coment√°rios para post:', req.params.postId);
        const postId = parseInt(req.params.postId);
        
        if (isNaN(postId)) {
            console.log('‚ùå [COMMENTS] ID do post inv√°lido:', req.params.postId);
            return res.status(400).json({
                error: 'ID do post inv√°lido',
                code: 'INVALID_POST_ID'
            });
        }
        
        // Verificar se o post existe
        console.log('üí¨ [COMMENTS] Verificando se post existe...');
        const post = await Post.findById(postId);
        if (!post) {
            console.log('‚ùå [COMMENTS] Post n√£o encontrado:', postId);
            return res.status(404).json({
                error: 'Post n√£o encontrado',
                code: 'POST_NOT_FOUND'
            });
        }
        console.log('‚úÖ [COMMENTS] Post encontrado:', post.title);
        
        // Buscar coment√°rios do post
        console.log('üí¨ [COMMENTS] Buscando coment√°rios...');
        const comments = await Comment.findByPost(postId);
        console.log('üí¨ [COMMENTS] Coment√°rios encontrados:', comments.length);
        
        const count = await Comment.countByPost(postId);
        console.log('üí¨ [COMMENTS] Total de coment√°rios:', count);
        
        // Log detalhado dos coment√°rios
        comments.forEach((comment, index) => {
            console.log(`üí¨ [COMMENTS] Coment√°rio ${index + 1}:`, {
                id: comment.id,
                author: comment.author_name,
                content: comment.content.substring(0, 50) + '...',
                created_at: comment.created_at
            });
        });
        
        res.json({
            comments,
            count,
            postId
        });
        
    } catch (error) {
        console.error('‚ùå [COMMENTS] Erro ao buscar coment√°rios:', error);
        res.status(500).json({
            error: 'Erro interno do servidor',
            code: 'INTERNAL_ERROR'
        });
    }
});

// Criar novo coment√°rio
router.post('/posts/:postId/comments', authenticateToken, commentValidation, async (req, res) => {
    try {
        console.log('üí¨ [COMMENTS] Criando novo coment√°rio...');
        console.log('üí¨ [COMMENTS] Usu√°rio:', req.user);
        console.log('üí¨ [COMMENTS] Post ID:', req.params.postId);
        console.log('üí¨ [COMMENTS] Conte√∫do:', req.body.content);
        
        // Verificar erros de valida√ß√£o
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            console.log('‚ùå [COMMENTS] Erros de valida√ß√£o:', errors.array());
            return res.status(400).json({
                error: 'Dados inv√°lidos',
                details: errors.array()
            });
        }
        
        const postId = parseInt(req.params.postId);
        const { content } = req.body;
        
        if (isNaN(postId)) {
            console.log('‚ùå [COMMENTS] ID do post inv√°lido:', req.params.postId);
            return res.status(400).json({
                error: 'ID do post inv√°lido',
                code: 'INVALID_POST_ID'
            });
        }
        
        // Verificar se o post existe e est√° publicado
        console.log('üí¨ [COMMENTS] Verificando post...');
        const post = await Post.findById(postId);
        if (!post) {
            console.log('‚ùå [COMMENTS] Post n√£o encontrado:', postId);
            return res.status(404).json({
                error: 'Post n√£o encontrado',
                code: 'POST_NOT_FOUND'
            });
        }
        
        console.log('üí¨ [COMMENTS] Post encontrado:', post.title, 'Status:', post.status);
        
        if (post.status !== 'published') {
            console.log('‚ùå [COMMENTS] Post n√£o est√° publicado:', post.status);
            return res.status(403).json({
                error: 'N√£o √© poss√≠vel comentar em posts n√£o publicados',
                code: 'POST_NOT_PUBLISHED'
            });
        }
        
        // Criar coment√°rio
        console.log('üí¨ [COMMENTS] Criando coment√°rio no banco...');
        const comment = await Comment.create({
            post_id: postId,
            author_id: req.user.id,
            author_name: req.user.name,
            content
        });
        
        console.log('‚úÖ [COMMENTS] Coment√°rio criado com sucesso:', comment.id);
        
        res.status(201).json({
            message: 'Coment√°rio criado com sucesso',
            comment
        });
        
    } catch (error) {
        console.error('‚ùå [COMMENTS] Erro ao criar coment√°rio:', error);
        res.status(500).json({
            error: 'Erro interno do servidor',
            code: 'INTERNAL_ERROR'
        });
    }
});

// Rota de debug para listar todos os coment√°rios
router.get('/debug/comments', async (req, res) => {
    try {
        console.log('üîç [DEBUG] Listando todos os coment√°rios...');
        const { db } = require('../database');
        
        db.all('SELECT * FROM comments ORDER BY created_at DESC', [], (err, rows) => {
            if (err) {
                console.error('‚ùå [DEBUG] Erro ao buscar coment√°rios:', err);
                res.status(500).json({ error: err.message });
            } else {
                console.log('üîç [DEBUG] Total de coment√°rios no banco:', rows.length);
                rows.forEach((comment, index) => {
                    console.log(`üîç [DEBUG] Coment√°rio ${index + 1}:`, {
                        id: comment.id,
                        post_id: comment.post_id,
                        author_name: comment.author_name,
                        content: comment.content.substring(0, 50) + '...',
                        status: comment.status,
                        created_at: comment.created_at
                    });
                });
                
                res.json({
                    message: 'Lista de todos os coment√°rios',
                    count: rows.length,
                    comments: rows
                });
            }
        });
        
    } catch (error) {
        console.error('‚ùå [DEBUG] Erro no debug:', error);
        res.status(500).json({ error: error.message });
    }
});

// Deletar coment√°rio
router.delete('/comments/:id', authenticateToken, async (req, res) => {
    try {
        console.log('üí¨ [COMMENTS] Deletando coment√°rio:', req.params.id);
        const commentId = parseInt(req.params.id);
        
        if (isNaN(commentId)) {
            return res.status(400).json({
                error: 'ID do coment√°rio inv√°lido',
                code: 'INVALID_COMMENT_ID'
            });
        }
        
        // Verificar se o usu√°rio √© o autor do coment√°rio
        const isAuthor = await Comment.isAuthor(commentId, req.user.id);
        if (!isAuthor) {
            return res.status(403).json({
                error: 'Voc√™ n√£o tem permiss√£o para deletar este coment√°rio',
                code: 'FORBIDDEN'
            });
        }
        
        // Deletar coment√°rio
        const result = await Comment.delete(commentId);
        
        if (!result.deleted) {
            return res.status(404).json({
                error: 'Coment√°rio n√£o encontrado',
                code: 'COMMENT_NOT_FOUND'
            });
        }
        
        console.log('‚úÖ [COMMENTS] Coment√°rio deletado com sucesso');
        res.json({
            message: 'Coment√°rio deletado com sucesso'
        });
        
    } catch (error) {
        console.error('‚ùå [COMMENTS] Erro ao deletar coment√°rio:', error);
        res.status(500).json({
            error: 'Erro interno do servidor',
            code: 'INTERNAL_ERROR'
        });
    }
});

module.exports = router;
